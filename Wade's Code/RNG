extends Node2D

var rng = RandomNumberGenerator.new()

# Inputs like "2d6+1d8+3" or "1d20-2" for testing
# uses a string read from user in final implementation
var dice_input = "1d20"

func _ready():
	rng.randomize()
	
	var total = 0
	var terms = parse_expression(dice_input)
	
	for term in terms:
		var result = evaluate_term(term)
		if result != null:
			total += result
		else:
			print("Invalid term: %s" % term)
	
	print("Total result: %d" % total)


func parse_expression(expr: String) -> Array:
	var pattern = RegEx.new()
	# Matches terms like "+1d6", "-2d4", "+5", "-3"
	pattern.compile(r"([+-]?[^+-]+)")
	var matches = pattern.search_all(expr.strip_edges())
	var terms = []
	for match in matches:
		terms.append(match.get_string(0))
	return terms


func evaluate_term(term: String) -> int:
	term = term.strip_edges()
	var sign = 1
	if term.begins_with("-"):
		sign = -1
		term = term.substr(1)
	elif term.begins_with("+"):
		term = term.substr(1)

	if term.find("d") != -1:
		var parts = term.split("d")
		if parts.size() == 2:
			var count = int(parts[0])
			var sides = int(parts[1])
			var subtotal = 0
			print("Rolling %dd%d..." % [count, sides])
			if count <= 999:
				for i in count:
					var roll = rng.randi_range(1, sides)
					print("Roll %d: %d" % [i + 1, roll])
					subtotal += roll
				print("Subtotal for %s: %d" % [term, subtotal * sign])
				return subtotal * sign
			elif count > 999:
				print("Please roll 999 or less dice")	
			return 0
	else:
		var flat = int(term)
		print("Flat modifier: %d" % (flat * sign))
		return flat * sign
	
	return 0
